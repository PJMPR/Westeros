// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Westeros.Recipes.Data.Repositories;

namespace Westeros.Recipes.Data.Migrations
{
    [DbContext(typeof(RecipesDbContext))]
    [Migration("20190120184344_MigracjaFilip01")]
    partial class MigracjaFilip01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Westeros.Recipes.Data.Model.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Devices");

                    b.HasData(
                        new { Id = 1, Name = "Oven" },
                        new { Id = 2, Name = "Plate" },
                        new { Id = 3, Name = "Pan" },
                        new { Id = 4, Name = "Cup" },
                        new { Id = 5, Name = "Stove" },
                        new { Id = 6, Name = "Toaster" }
                    );
                });

            modelBuilder.Entity("Westeros.Recipes.Data.Model.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AveragePrice");

                    b.Property<int>("Calories");

                    b.Property<double>("Carbohydrates");

                    b.Property<int>("Category");

                    b.Property<double>("Fats");

                    b.Property<string>("Name");

                    b.Property<string>("PhotoPath");

                    b.Property<double>("Proteins");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new { Id = 1, AveragePrice = 3.5, Calories = 250, Carbohydrates = 0.0, Category = 2, Fats = 15.0, Name = "Chicken Stock", Proteins = 26.0 },
                        new { Id = 2, AveragePrice = 1.0, Calories = 402, Carbohydrates = 1.3, Category = 0, Fats = 33.0, Name = "Baby spinach", Proteins = 25.0 },
                        new { Id = 3, AveragePrice = 1.5, Calories = 272, Carbohydrates = 0.0, Category = 5, Fats = 25.0, Name = "Ramen noodles", Proteins = 11.0 },
                        new { Id = 4, AveragePrice = 4.0, Calories = 208, Carbohydrates = 0.0, Category = 2, Fats = 12.0, Name = "Sliced cooked pork", Proteins = 20.0 },
                        new { Id = 5, AveragePrice = 0.8, Calories = 66, Carbohydrates = 17.0, Category = 0, Fats = 0.4, Name = "Red onion", Proteins = 0.6 },
                        new { Id = 6, AveragePrice = 2.0, Calories = 16, Carbohydrates = 7.0, Category = 0, Fats = 0.2, Name = "Garlic", Proteins = 0.6 },
                        new { Id = 7, AveragePrice = 0.8, Calories = 19, Carbohydrates = 1.0, Category = 0, Fats = 0.1, Name = "Red pepper", Proteins = 0.6 },
                        new { Id = 8, AveragePrice = 0.8, Calories = 80, Carbohydrates = 17.0, Category = 6, Fats = 0.4, Name = "Olive oil", Proteins = 0.6 },
                        new { Id = 9, AveragePrice = 0.8, Calories = 20, Carbohydrates = 17.0, Category = 6, Fats = 0.4, Name = "Parsley", Proteins = 0.6 },
                        new { Id = 10, AveragePrice = 0.8, Calories = 120, Carbohydrates = 17.0, Category = 6, Fats = 0.4, Name = "Chorizo sausage", Proteins = 0.6 }
                    );
                });

            modelBuilder.Entity("Westeros.Recipes.Data.Model.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cuisine");

                    b.Property<string>("Description");

                    b.Property<int>("Difficulty");

                    b.Property<bool>("IsNew");

                    b.Property<string>("Name");

                    b.Property<string>("PhotoPath");

                    b.Property<int>("PrepTime");

                    b.HasKey("Id");

                    b.ToTable("Recipes");

                    b.HasData(
                        new { Id = 1, Cuisine = 0, Description = "Use chicken, noodles, spinach, sweetcorn and eggs to make this moreish Japanese noodle soup, for when you crave something comforting yet light and wholesome", Difficulty = 0, IsNew = true, Name = "Ramen", PhotoPath = "http://images.kglobalservices.com/www.morningstarfarms.com/en_us/recipe/recipe_6540350/recip_img-6542859_banh_mi_ramen.jpg", PrepTime = 7 },
                        new { Id = 2, Cuisine = 0, Description = "This moreish Mediterranean-style vegetable stew is perfect for a super-healthy midweek supper.", Difficulty = 2, IsNew = true, Name = "Ratatoille", PhotoPath = "https://www.tasteofhome.com/wp-content/uploads/2017/10/exps9117_LM963641C27-2.jpg", PrepTime = 18 },
                        new { Id = 3, Cuisine = 0, Description = "Whip up this easy version of the traditional Spanish seafood dish straight from the storecupboard. Add extras such as chorizo and peas if you like", Difficulty = 3, IsNew = true, Name = "Paella", PhotoPath = "https://www.tasteofhome.com/wp-content/uploads/2017/10/exps40641_HCA1383857D43.jpg", PrepTime = 45 }
                    );
                });

            modelBuilder.Entity("Westeros.Recipes.Data.Model.RecipeDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviceId");

                    b.Property<int>("RecipeId");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeDevices");

                    b.HasData(
                        new { Id = 1, DeviceId = 1, RecipeId = 1 },
                        new { Id = 2, DeviceId = 2, RecipeId = 1 },
                        new { Id = 3, DeviceId = 3, RecipeId = 1 },
                        new { Id = 4, DeviceId = 5, RecipeId = 2 },
                        new { Id = 5, DeviceId = 3, RecipeId = 2 },
                        new { Id = 6, DeviceId = 6, RecipeId = 3 },
                        new { Id = 7, DeviceId = 2, RecipeId = 3 },
                        new { Id = 8, DeviceId = 1, RecipeId = 3 },
                        new { Id = 9, DeviceId = 4, RecipeId = 3 }
                    );
                });

            modelBuilder.Entity("Westeros.Recipes.Data.Model.RecipeIngredient", b =>
                {
                    b.Property<int>("IngredientId");

                    b.Property<int>("RecipeId");

                    b.Property<double>("IngredientQuantity");

                    b.HasKey("IngredientId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredients");

                    b.HasData(
                        new { IngredientId = 1, RecipeId = 1, IngredientQuantity = 5.0 },
                        new { IngredientId = 2, RecipeId = 1, IngredientQuantity = 1.0 },
                        new { IngredientId = 3, RecipeId = 1, IngredientQuantity = 2.0 },
                        new { IngredientId = 6, RecipeId = 2, IngredientQuantity = 8.0 },
                        new { IngredientId = 5, RecipeId = 2, IngredientQuantity = 8.0 },
                        new { IngredientId = 4, RecipeId = 3, IngredientQuantity = 1.0 },
                        new { IngredientId = 6, RecipeId = 3, IngredientQuantity = 0.5 },
                        new { IngredientId = 9, RecipeId = 3, IngredientQuantity = 8.0 },
                        new { IngredientId = 10, RecipeId = 3, IngredientQuantity = 2.0 },
                        new { IngredientId = 8, RecipeId = 3, IngredientQuantity = 1.5 },
                        new { IngredientId = 4, RecipeId = 1, IngredientQuantity = 2.0 },
                        new { IngredientId = 7, RecipeId = 2, IngredientQuantity = 8.0 },
                        new { IngredientId = 8, RecipeId = 2, IngredientQuantity = 8.0 }
                    );
                });

            modelBuilder.Entity("Westeros.Recipes.Data.Model.RecipeDevice", b =>
                {
                    b.HasOne("Westeros.Recipes.Data.Model.Device", "Device")
                        .WithMany("RecipeDevices")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Westeros.Recipes.Data.Model.Recipe", "Recipe")
                        .WithMany("RecipeDevices")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Westeros.Recipes.Data.Model.RecipeIngredient", b =>
                {
                    b.HasOne("Westeros.Recipes.Data.Model.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Westeros.Recipes.Data.Model.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
